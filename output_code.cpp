namespace dybi{class dynamic_bitset                                                                                                {             public:constexpr static                                                                                               int B =64;class bit_reference{dynamic_bitset& 
bitset_ref;int pos;public                                                                                                          :               bit_reference(dynamic_bitset                                                                              &  ref, int  p) :bitset_ref(ref),pos(p){}bit_reference& 
operator=(bool val){bitset_ref                                                                                                   .set            (pos,val);return*this;}bit_reference                                                                                        & operator=(const bit_reference& other) 
{bitset_ref.set(pos,static_cast                                                                                                   <bool            >(other));return*this;}operator                                                                                      bool  ()const{return bitset_ref.get(pos)  ;} 
bit_reference&flip(){bitset_ref                                                                                                 .  set              (pos,!bitset_ref.get(pos))                                                                                                  ;return*this;}bool/**/operator       
~()const{return!bitset_ref                                                                     .                                   get              (pos);}};static_assert(/*v*/                                                                                                sizeof(uint64_t)*8==B/*es*/,         
 "check block width")                                                                                ;                              static_assert   (std::is_same<uint64_t,uint64_t                                                                   >     :: value  , "modify popcnt(), ctz(), clz()");static      
inline constexpr bool                                                                               on        (  int i ,uint64_t x )noexcept{return ((uint64_t(1)<<i)&x)!=0;}static                                                                                     inline  constexpr uint64_t prefix(int  i   ) 
noexcept{return/*a*/                                                                                (i                     >=B/*    d*/)            ?~uint64_t(0)/*y*//**/:((uint64_t                                                                                             (1)<<i)/**/-uint64_t(/**/1         
));}static/**/inline                                                                              constexpr                       uint64_t          suffix(int i)noexcept{return~prefix                                                                                          (B-i);}static inline constexpr      
uint64_t/*s*/range(                                                                                int                              l,int            r)noexcept{return prefix(r)^prefix(l                                                                                          -1);}static constexpr int         
popcnt(uint64_t/**/                                                                       x)       noexcept                         {return          __builtin_popcountll(x);}static constexpr                                                                              int   clz(uint64_t x)noexcept{return     
__builtin_clzll(x)                                                                               ;}static                         constexpr     int ctz(uint64_t x)noexcept{return __builtin_ctzll                                                                                 (x);}static inline constexpr  int 
block_id(int i)noexcept                                                                           {return                        i / B;} int          n,m;std::vector<uint64_t>b;inline uint64_t  submask                                                                   (int l ,int r)const noexcept{int   bx    
/**/=block_id/**/(  l                                                                             /**/)                              ;assert(          bx==block_id(r));return(b[bx]&range/**/(        l                                                                            /**//**//**/-bx/*i*//**/         
*B+1,r-bx*B+1))/*  */                                                             ;               }/*s*/                              inline/*          */void/*vx*//**/trim(                                                                                                        )noexcept{b.back()/*s*/         
&=prefix(n%B==0?B :n%                                                             B               );/**/                              /**//**/}          dynamic_bitset         (int/*ri*/n)/*v*//*x      d*/                                                                        :dynamic_bitset(n,false         
/**//*t*//**//*v  */                                                             /*               *//**/                              /*f*/){}/*          w*//*x*/;    dynamic_bitset(int/*o*/n,bool/*      l*/                                       init)                           :n(n),m((n+B-1)/*qc*//         
B),b/*xllw*//**/ (m,                                                             /*               */init?                              ~uint64_t          (/*yng*//**/0/**/):uint64_t(0/**/)/**/){trim/*      n*/                                   /*t*//**/                         (/*vef*/);};/**/inline         
void/**/set(int /**/                                                             /*               */i/**/                               ,bool/**/          val)noexcept{assert(0<=i/**/and/**/i<n);if(val/*    h*/                                /**//**/   )                         /*bpd*//**/b/**//**/[         
/*euwmy*//**/i/ /**/                                                             /* t             r*/B]|=(                              uint64_t(1          )<</*h*/(/**/i%B/**//**/));/**//**/else/**/b/**/[     i/                             /*k*//* */                            /*bsd*//**/B]&=~/**/(         
uint64_t(1/*ej */)<<                                                             (i %                                                    B));}inline         bool/**/get(int/**/i)const/**/noexcept/*ir*//**/{/*     */                          /**/assert(                            /**//**//**/0/**/<=i         
and/**/i/**/<n /**/                                                              );               return(b                                /**//*g*/[i/       /*rqt*/B/**/]/**//**//**//**/&/**/(uint64_t /**//*y */                             /*de*//*whq*/ (                         1)<<(/**/i%B)))/*j*/         
!=0;}bit_reference                                                                                operator[ ]       (                /*    q*/int/**/i){       assert(0<=i/**/and/**/i<n);/*j*/return                                          bit_reference/**/                     (   /*oiook*//**/*/*v*/         
this/**//*v*/ /*i*/                                                              ,/* bp           s*//**//* */       i                );    /**/}/**/bool       operator[](int/*c*/i)const{assert                                             (0<=i and/*d*/i/**/                    /*  wdk*/<n)/**/;return         
/*t*//*nvxo*/get(i                                                              ) ;}void          reset()/*t */      /*                */     noexcept{/**/      std::fill(b.begin()/**//*m*/                                                /**/,/**/b.end()/**/                    /*c  kfr*//**/,/**//**/         
uint64_t(0));}void                                                              operator&= (const dynamic_bitset     &other         ) {for(int i=0;i<std::min    (m,other.m);i++)b[i]&=other                   .b                       [i   ];if(m>other.m)std::                    fill (b.begin()+other.m  ,   b  
.begin()+m/*clzc*/                                                              ,uint64_t          (0/*v*/)/**/)       ;}               void    operator|=(const    dynamic_bitset/**/          &               /*oxp*/                  /*  ylym*//*r*/other/**/                     )/*  */{for/*mza*/(int         
/*eg*/i/*v*//*c*/   =                                                           0; i<std/*         *//*j*/::min/*       k*/              /**/(   m/*v*//*f*//**/      ,/**//**/other          /**/              /*d*/.m/*                */) ;/**/i/**//**/++/**/                     /**/ )b[i]|=/**/other.         
b[i/*y*/];trim/*u  */                                                           /**/();}/*f         m*//**/void/**/      /*n              z*//*   odar*/operator^=/*    a*//*uz*/(                              const/**/                /**/dynamic_bitset&other                     ){for (int/**/i=0/**/;         
i</**//**/std/*q   */                                                           /*gn*//*k qp         */::min/*q*/(/*      *//*              do*//*  *//**/m,/**/other/*j  */.m)                                 ;i/*ne*/                  ++)/*x*/b/*n*/[/*c*/i]                       ^=other.b[/*q*/i]/**/         
;trim();}void/*a   */                                                            /*s    u          */ /*l*/operator/*      *//*m             g*//**/  /**/<<=(/**/int/**/x/**/                                 /**/){if                   (/**/x==/*je*/0)return                       ;/**/ if(/**//**/x>=n         
){reset/*mzmf*/(  );                                                                                     return/**//*zl      tu*//*           eo*//**/;  }const/*a*/int/**/s=   /**/                          /*qlkx*/  x/                /**//* */B/**/,d=/**/                        x/*t*/%B,r=/**/B-/**/         
/*jmb*//**//**/   d;                                                                                          /**/if/**//*q    u*/(/*a          gw*//**/d/*andf*//**/>0/*fi*/  )/*j*/{                       for(int  i=m-                1-/*a */s/**/;/*k*/                           /**/i>0;i/**//**/--)         
b[i+s]/*pl*/=/*   */                                                                                               /**/(b/**/[i  ]<</**/d/**//*  cn*/)|/*can*//**/(b[i-/**//*  ls*//**/                    1/*axu   i*/]/*               *//*  o*//**//**/>>                            /**/r) ;/**//**//**/         
/*qk*//**//**/  /**/                                                                 /**//*               *//*       r*/b/*ro*/[/*w*/s]/**/=b/**/[/**//**/0/*a*//*m*/]<</*n*/d  ;}/**/else                {/*    *//**/for              /*btv */(int/**/i=                               /**/m-/**/1/**/-s;i         
>0;/*swg*/i--)  /**/                                                                  /**/b[                            /**//**/i+/*y*/s]/**/=/**//**/b[i/*l*//*c*/]/**//**/;b/*   *//*d*/            [s/**/]=/**//*h*//*y              k*//**//*b*//**/                                 b[0]/* w*//**//*z*/         
/**/;}std /*mw f*/::                                                             /**//**/fill                              (b.begin/*t*//**//**//**//**/(/**/)/**/,/*lap*/b/*c*//**/./**/begin(/**//*i*//**//*jn*/)+/**/s,              uint64_t(0/*j*/                                  /**//**/));/**/trim         
()/**/;/* c*/ }void                                                               operator>>=(                           /*  qkjkos*/int/**/x/*heli*/){if(x/*xd*/==/**/0/**/)return;/**//**/if/**//*cc*/(/*vd*//**//**//*               *//**/x/*kj*/                                     >=n)/**/{/*d*//**/         
/*yq*//*h f*/ /*s*/                                                                /*m*//**//**/                        /*e  mavr*//**/reset/**/(/**/)/**//**/;return/**/;/**/}/*k*//**//**/const/**//**//*d*/int/**/s=x/              B,d=x/*pkx*/%                                       B,l=B/**/-d;/*m*/         
/*rgt*//* eq gpp*/                                                           /*j     scr*//*xb*/if                      (   /*pd*//*tg*/d/**/>/*n*/0){/*d*//**/for/*f*//**/(/**/int/**//**/i=s/*tu*//*q*/;i/**/</**/m/**/  -           /*l*/1/**/;                                         i++)b[ /**/i/**/-         
/**//*z*/ /**//**/                                                            s]/**/    /*cop*//**/=(/*                */b[/*n*/i/*u*//**/]/**/>>d)|/**/(/*q*/b[/**//*cb*//**//**/i+1]/*p*//**/<</*m*//**//**//**/l)/**/  /*              ql*/                                              ;/*af */b[m-/**/         
/*yznma*/   /*ou*/                                                             /*wt*//*d    qs*//**/1/**/        -s/*w*//**//**/]=/**/b[/**/m-/**/1]>>/**/d/**/;}/**/else{/**//*z*//**//**//**/for/**/(int/**/i/**/=/*v  */s                                                                /**//*dvoh*/;i<m         
/*ii*//*e  y*//**/                                                              /*ek*//**//**/          /*d*//**/;/**/i/**/++)/**/b[/**/i-/**//**//*h*/s]=/**/b/*s*/[/*q*/i/*lf*/]/**/;}std::/**/fill(b./*bb*/begin/*h  j*/                                                                  /*joq */()/**/+         
m-/*l*/s/* */,/**/                                                                /**//**//**/b.end/*f*/()/**//*r*/,/*b*/uint64_t(0)/**//**/);}bool/**//*d*/operator==/**/(const/**//**//**//**/dynamic_bitset/**//*s  *//*               *//*aebo*/&other                                    /*rl t*/)/**/{         
return/**/  ((n==                                                                   other.n)and/**/b==other/*u*//**/./*c*//*bl*/b)/**/;/**//**//**/}/**/bool/*i*/operator!=/*x*/(const/**//*d*/dynamic_bitset/**//*i  b*//*           l*/&/**/other/**/)/**//**/                               /*  dbk*//**/         
{return/*n   gv*/                                                                    /*o*/!(/**/*this==/*t*//**/other);}/**/dynamic_bitset/**//**/operator/*o*/&(/**/const/*j*/dynamic_bitset&/**/other){/**/dynamic_bitset           /*ytxc*//**/result/**/(/*x*/                              *  this)/**/         
/**/;result   &=                                               /*dhuf*/other         ;return/*ox*/result/**/;}dynamic_bitset/**//*d*/operator/**/|(/*j*/const/**/dynamic_bitset&other){/**//**/dynamic_bitset/*t*/result/*          s*//**/(*this)/**//**//**/;result                              /**//*f*/         
|=/*x*/other                                                  /**/;return/**/result    ; }dynamic_bitset/**/operator/**/^/**//**/(/**/const/**//*kk*/dynamic_bitset&/*fe*//**/other)/*p*/{dynamic_bitset/**//**/result/*e       zypf*/(*this);result^=/*m*//**//**/other                           /*g*//**/         
/*vrv*//*gu*/                                               /**/;/**/return/*m*/result/*   rqi*/;/**/}dynamic_bitset/*h*/operator>>(/*z*/int/**/x/**/){dynamic_bitset/**/result/*l*/(/*pe*/*/*wncg*//**/this);/*e*/result     /**/>>=x/**//**//**/;return/**//**//**/result                        /**/;/**/         
/*nfxv*/}/**//*                */                      dynamic_bitset/**/operator<<(int/**/x     ){dynamic_bitset/**/result(*/*c*/this)/**//**//**/;/**/result/*z*//**/<<=/**/x/**/;/**//*e*/return/**/result/*kg*/;/**/  /**/}/**//*t*//*s*/dynamic_bitset/*g*/operator/**/~                       /**//**/         
/*iuijxz*//**/               /*  */                 /*is*//*a*//**//**//*s*//**//*g*//**//*p*//*o   *//*gv*//**//**//**//*bm*/()/**/{dynamic_bitset/*r*/result/**//**/(*/**//**/this/**/)/**/;/**//**/for(auto&/*h*/  v:/**//**//**/result./*ni*//**/b/**//**/)v=~v;/**/result                       ./*en*/         
/*d*//**//**/       /**//**/                    /* fve*//*drpr*//**//**//**//**/trim(/*f*/)/**//*pix  k*//**//*jl*/;return/**//**//**/result/**/;/**/}/**/int/**/count(/**//*ku*/)/**/const/**/noexcept{/*j*/return  /*h*//**//*g*/std::accumulate(/**/b.begin/**//**/(),/**/                          b/**/         
/*t*//*f*//*     bn*//*v*//**//*p*/            /*n  c*//**//*btdgo*//**//*k*//**//**//**//**/./**//*pm  fhgpw*//**/end(/**/),0/*o*//*q*//**//**/,[]/**/(/**/int/**//*o*/sum,uint64_t/**/value)/*x*//**//**/{/**//*h oq*/return/**/sum/**//**/+/*y*/popcnt/**//**/(value)/**/                             ;})         
/*ri*/ /*uz    qqro*//*ck*//*nf*/                    /*qr*//*i*//**//**//**//*k*//**//*qlkt*//**//**//**/   /**//**//*ywx*/;/**/}int/**//*y*//**/find_first/**/(/*grv*/){/**/int/**/pos/**/=/**/-/**/1;/**/for(int  /**/bi/**//**/=0;/*s*//**//**/bi</**/m;/**//**/bi/*r*/++                               )         
{if(b[ bi] ==uint64_t(0))continue  ;pos=ctz          (b[bi])+bi*B;break;}return pos;}int find_last(){int pos= -1;for(int bi=m-1;bi>=0;bi--){if(b[bi]==uint64_t(0))continue;pos=B-clz  (b[bi])-1+bi*B;break;}return pos;}template<typename F1,typename F2>void range_process                          (int l  ,int r, 
/*cs*/ /*  qod*//*chsgub*//*   *//**//*p*/    /**//*d a*//**//*isx*//**//*zoszi*//**//*ocr*/F1/**/block_brute  /**//*t*/,/*z*//**/F2/**/block_quick)/*y*/{/*x*//*u*/assert/**/(/*   */0/**/<=/**//**/l/*h*/and/*q  */l<=r/**/          and/*r*/r</**/n);int/**//*h*//**/bl                                           
/*ugd  oa cm*//**//**//*k  m*//*yiwbvtb*//*x   dm*//*b  eq*//*t*//**//*oz*//**/=/*n*//*r*//*we*//**/block_id/* k*/(/*el*/l),/**/br/**/=/**/block_id(r/*fqc*//**/);if/*a*//**/(    /**//*r*/bl==/**//*d*//**//**/  br/**//**/            /*u*/)block_brute(l/**//**/,/**/r                                            
/*bnu  y t*//**//**/ /**//*s*//**//*o*//*u*//*           n*//*xoyd*//**//*u*//**//**//**//*      y*//**//**//*  zep*//**//**//**//**//**/  /*w*/);else/**//**/{block_brute    (l/**/,(bl/**//**//**/+1)*/**/B/*  */-/**/1)               ;for/*mk*/(/**/int/**/bi=/*zo*/                                             
/*uja             *//**//*t*//*drx*//*j*//**//*o      */  /**//**//**//**//*o*//**//*c*//*s           *//*gpf*/ /*dcz*//*k*/bl+1;bi</*f*/br     /*n*/;/**/bi              ++)block_quick/**/(bi)/*g*//*ux*//*   y*/;/**/                /**/block_brute/**//**/(br*B,r)                                              
/*oxy   uihj*//*n*//**//**//*fvr*//**/;/*j*//**/}/*        w bp*/}/**/void/**/range_set/*z             r*//*z*/  /**/(int/**/l/*j*/,int/*x*/r/**//*a            */,/*w*/bool/**//**/val){/**//**/auto/*c*/    /**//*                *//*x*/block_brute/**/=[/**/&](int                                               
/**//* *//**//**//*lhhdbh*//**//*zk*//**//*o*//*o*//**//**/ /**//**//*rp*/l/*f*/,int/**//**/r           )->void{ /*eo*/int/**//*t*//*m*//*z*/bi/**/=block_id/**/(l)/**/;/**/uint64_t/**//**//**/mask/**/                        /*tp*/=range(/*yyu*//**/l/*u*/-/*s*/bi                                               
/*krvy av*//*c*//**//*g*//**//**//**//*je*//*yg*//*y*//**//* dbk*//**/*/**//**//**/B/**//**/+/*            vu*//*  nreo*//**/1/*u*//**//**/,/*y*/r-/**/bi/**/*B/*a*/+/*rc*/1);if(/**/val/**//*b*//**/                     /**/)/*m*/b/*a*/[bi/**/]/*m*//*lc*/|=/**/mask                                              
/*pm*//*ceo*//**//**//**//*f*//**//**//**//*f*//**//*cqckcgp rkil*//**//*isrc*//**//**/;else/**/b/*            i*/  [bi/**//**/]/**/&=/**/~/*g*/mask;}/**/;/**/auto/**/block_quick=[&/**/]/**//**/              /**//*q*//**/(int/*h*/bi)/**//**/->/**//**/void/**//**/                                              
/**//**//**//*ab*//*vs*//*qqhfl*//*a*//*e*//*d*//**//**//*dc lqf*//*o*//*h*//**//*f*//*g*//*x*//**//**/               /**//**//*q*//**//*j*//**//*jpc*//**/{b[bi/*ab*/]=/**//**/(val/**/?~/*e*/        uint64_t(/**/0/**/):/*c*/uint64_t/**/(0))/**/;}/**/;range_process                                             
/*qaty*//**//**//*y*//*t*//*m*//**//*ox*//**//*tom*//*dd*//* dej*//*wnj*//**//*pmu*//**/(/**/l/**/,/*gp*//**//*u          h*/r/**/,/**/block_brute,block_quick);}/*n*//**/int/**/count(int/*    ur*/l/*p*//**/,int/**//**/r)/*x*//**//**/{/*kf*/int/**//**/cnt/**/=/*p*/                                             
/*l*//*b*//**//*di*//**//*h*//**//**//*d*//*ka*//*v*//*srheq *//*x*//**//*m*//**//**//**/0/**/;auto/**/block_brute/**/=[        &/**//**//*h*/]/**/(/*u*/int/**//**/l,/**/int/**//**//**/   r)/**//**/->/*o*/void{cnt+=popcnt/**/(/**//**//**/submask/**//**//**/(/*s*/                                              
/*pptl*//**//*ju*//*v*//*t*//**//**//*z*//*d*//**//*lx*//**/ /*m*//*ufu*//*ojurb*//*xn*//**//**//**//*n*//*w*//**//**//**//*h*//*     ftw*/l/**/,r))/**//**/;/*v*/}/**/;/**/auto/**//**/block_quick=/*c*//**/[&]/*t*/(/**/int/**/bi)/**/->/**/void{/**/cnt+=popcnt/**/                                               
/*adg n*//**//*m*//**//*b*//**//**//**//*qzyz*//*g*//**//**//*v*//*jk*//**//*m*//*yyvw*//*gd*/(/*q*/b/**/[bi/**//**//**/]);/*v*//**//**/};/**//**/range_process/**/(l/**//**/,r/*j*/,/**/block_brute,/**//**/block_quick/**/)/**//**//**/;/**/return/**/cnt;}/*z*/                                                   
/*fhu  lxrhcgos*//*e*//**//*bbr*//**//*so*//**//**//*o*//**//**//**//**//*n*//*oe*//*v*//*ak*//**//**//**//*p*//**//**/int/*y*/find_first(/**//**/int/*l*/l,int/**//**/r){int/**/pos/**/=-1;/**//**//**/auto/*ko*/block_brute/**/=[/*gdm*/&/**/](/*z*//**/int                                                        
/*td   q*//*k*//*c*//*h*//**//**//**//**//**//*l*//*zly*//*mz*//*j*//*nje*//**//*ug*//*g*//**//*lxj*//**//**//**//*cj*//*mk*//**//**//*i*/l,int/**/r)/*s*/->/**/void{for(int /*s*/i/**/=/**//**//**//**/l;i<=/**/r/*s*/and/**/pos/*tl*/==/**//*b*/-1/**/;                                                            
/*u    y*//*pyk*//**//**//*msz*//**//*o*//*d*//**//**//*k*//*vwv*//*h*//**/ /*d*//**//*l*//*n*//**//*z*//**//*f*/i/**/++/**/)if(/*a*//*biqh*//**/get(/*gjr     x*//**/i)    )pos=i/*m*/;/*q*/};/*w*/auto/*r*//**/block_quick/**//**/=[&/**/](/**/int                                                                 
/*a     wszeac*//**//**//*cjd*//*t*//*y*//**//**//*t*//*tc*//**//*w*//**//*      x*//**//**//*z*/bi/**/)->void{/**//*cq*/if/*n*/(b[bi]/*cf*/==uint64_t/**//*s             s*//*tr*//**/(/*ge*//*f*/0/*f*/)or/**/pos/**/!=-1/**//**//**/)return;                                                                      
/*      poobv*//**//**//*ti*//**//*ec*//**//*t*//**//*o*//**//**//*n*//**//*         e*//*b*//**//**//*yr*//*b*//*h*//**//*p*/pos/**/=/**//*q*/ctz(/**/b[bi]/*i         */)/*s*/+bi*B;/**/};range_process(l/*a*/,/**/r/**//**/,block_brute        ,                                                                  
/*       qkf*//*y*//*pr*//**//*lw*//*nq*//**//*ix*//**/block_quick);/**//*o*/             return/**//**/pos/**//*wby*/;}int/*k*//*d*/find_last(/*t*/int/**/l/**/,      int/**//*xz*/r/**//**/)/*q*/{int/*j*//**/pos/*kp*/=-/*wh*/1;auto                                                                              
/*    l   bxik*//**//*sa*//**//**//*amp*//**//**//*i*//**//*d*//*d*//**//*m*/                  /*pbi*//**//*ww*//**/block_brute=[&](/**/int/**/l,/*x*/int/**/r/**/    )->void{for/**/(/**/int/**//*m*/i/*f*/=/**/l;/**/i/**/<=/**/                                                                                   
 r    ;   i++)if(get(i))pos=i;};auto block_quick=[&](int bi)->void{if(b[bi]==uint64_t           (0))return;pos=B-clz(b[bi])-1+bi*B;};range_process(l,r,block_brute    ,block_quick);return pos;}friend std::ostream&operator<<                                                               (std ::ostream    &os , 
/*    q    *//*ri*//*xtobj*//**//*f*//*p*//*j*//**//*u*/const/**/dynamic_bitset  &                      /*c*//*cc*//*vi*//**//**//*pvs*//**//*e*//*q*/bitset/**//*    *//*y*//**/)/**/{for/**//*hh*/(int/**//*y*/i/**//**/                                                                                           
/*  u a     s*//*q*//*o*//*v*//**//*c*//*t*//*lzijv*//*gh*//**//**//**//*iaav*/                              /*xt*//*ix*//*l*//*u*//*a*//**//*dxo*//**//*y*//**//*    tvhitmvo*/=bitset.m/**//*c*/-/**/1/*k*/;i>=/**/0                                                                                               
;  /*v       t*//*k*//*gp*//*jyewij*//**//**//*w*//*k*//*g*//*k*//**//**//**/-- i                                 /*c*//**//**//**//*x*//*ox*//*y*/)/*o*//**/os/*b     k*//*t*//**/<</**//**/std::/*t*/bitset/*g*/          <                                                                                        
B  /*w        t*//*b*//**//**//*y*//**//*qgi*//**//*x*//**//*p*//*lkya*//**//*h */                                    /*gwoiv*//*oq*//**//**/>(bitset./**//**//**/     b/**//**/[/**//**//**/i/**//**//**/])/**/            ;                                                                                        
/* yrw         m*//*lyl*//**//**//**//**//*rloj*//**//*g*//*o*//*y*//*j*//*wclf  */                                       /**//*s*//**//*w*//**/os/*suk*/<</**//*      */'\n'/*x*/;/**/return/**//**/os;}};}/**/                                                                                                     
